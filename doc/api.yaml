---
openapi: 3.0.0
info:
  title: Home music library service
  description: ''
  version: 1.0.0

servers:
  - url: /

paths:
  '/user':
    post:
      operationId: UserController_create
      summary: Create user
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/CreateUserDto'
      responses:
        '201':
          description: The user has been created.
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/User'
        '400':
          description: Does not contain required fields
      tags:
        - Users
    get:
      operationId: UserController_findAll
      summary: Get all users
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/User'
      tags:
        - Users
  '/user/{id}':
    get:
      operationId: UserController_findOne
      summary: Get single user by id
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the user
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/User'
        '400':
          description: ID has invalid format
        '404':
          description: User not found
      tags:
        - Users
    put:
      operationId: UserController_update
      summary: Update user password
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the user
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/UpdateUserPasswordDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/User'
        '400':
          description: ID has invalid format
        '403':
          description: Old password is wrong
        '404':
          description: User not found
      tags:
        - Users
    delete:
      operationId: UserController_remove
      summary: Delete user
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the user
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Successful
        '400':
          description: ID has invalid format
        '404':
          description: User not found
      tags:
        - Users
  '/track':
    post:
      operationId: TrackController_create
      summary: Create track
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/CreateTrackDto'
      responses:
        '201':
          description: The track has been created.
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Track'
        '400':
          description: Does not contain required fields
      tags:
        - Tracks
    get:
      operationId: TrackController_findAll
      summary: Get all tracks
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/Track'
      tags:
        - Tracks
  '/track/{id}':
    get:
      operationId: TrackController_findOne
      summary: Get single track by id
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the track
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Track'
        '400':
          description: ID has invalid format
        '404':
          description: Track not found
      tags:
        - Tracks
    put:
      operationId: TrackController_update
      summary: Update track
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the track
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/UpdateTrackDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Track'
        '400':
          description: ID has invalid format
        '404':
          description: Track not found
      tags:
        - Tracks
    delete:
      operationId: TrackController_remove
      summary: Delete track
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the track
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Successful
        '400':
          description: ID has invalid format
        '404':
          description: Track not found
      tags:
        - Tracks
  '/artist':
    post:
      operationId: ArtistController_create
      summary: Create artist
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/CreateArtistDto'
      responses:
        '201':
          description: The artist has been created.
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Artist'
        '400':
          description: Does not contain required fields
      tags:
        - Artists
    get:
      operationId: ArtistController_findAll
      summary: Get all artists
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/Artist'
      tags:
        - Artists
  '/artist/{id}':
    get:
      operationId: ArtistController_findOne
      summary: Get single artist by id
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the artist
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Artist'
        '400':
          description: ID has invalid format
        '404':
          description: Artist not found
      tags:
        - Artists
    put:
      operationId: ArtistController_update
      summary: Update artist
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the artist
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/UpdateArtistDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Artist'
        '400':
          description: ID has invalid format
        '404':
          description: Artist not found
      tags:
        - Artists
    delete:
      operationId: ArtistController_remove
      summary: Delete artist
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the artist
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Successful
        '400':
          description: ID has invalid format
        '404':
          description: Artist not found
      tags:
        - Artists
  '/album':
    post:
      operationId: AlbumController_create
      summary: Create album
      parameters: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/CreateAlbumDto'
      responses:
        '201':
          description: The album has been created.
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Album'
        '400':
          description: Does not contain required fields
      tags:
        - Albums
    get:
      operationId: AlbumController_findAll
      summary: Get all albums
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                type: array
                items:
                  '$ref': '#/components/schemas/Album'
      tags:
        - Albums
  '/album/{id}':
    get:
      operationId: AlbumController_findOne
      summary: Get single album by id
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the album
          schema:
            format: uuid
            type: string
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Album'
        '400':
          description: ID has invalid format
        '404':
          description: Album not found
      tags:
        - Albums
    put:
      operationId: AlbumController_update
      summary: Update album
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the album
          schema:
            format: uuid
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              '$ref': '#/components/schemas/UpdateAlbumDto'
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Album'
        '400':
          description: ID has invalid format
        '404':
          description: Album not found
      tags:
        - Albums
    delete:
      operationId: AlbumController_remove
      summary: Delete album
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the album
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Successful
        '400':
          description: ID has invalid format
        '404':
          description: Album not found
      tags:
        - Albums
  '/favs':
    get:
      operationId: FavoriteController_findAll
      summary: Get all favorites
      parameters: []
      responses:
        '200':
          description: ''
          content:
            application/json:
              schema:
                '$ref': '#/components/schemas/Favorite'
      tags:
        - Favorites
  '/favs/artist/{id}':
    post:
      operationId: FavoriteController_addArtist
      summary: Add artist
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the artist
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: The artist has been added.
        '400':
          description: ID has invalid format
        '422':
          description: The artist doesn't exist
      tags:
        - Favorites
    delete:
      operationId: FavoriteController_removeArtist
      summary: Remove artist
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the artist
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Successful
        '400':
          description: ID has invalid format
        '404':
          description: Record not found
      tags:
        - Favorites
  '/favs/album/{id}':
    post:
      operationId: FavoriteController_addAlbum
      summary: Add album
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the album
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: The album has been added.
        '400':
          description: ID has invalid format
        '422':
          description: The album doesn't exist
      tags:
        - Favorites
    delete:
      operationId: FavoriteController_removeAlbum
      summary: Remove album
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the album
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Successful
        '400':
          description: ID has invalid format
        '404':
          description: Record not found
      tags:
        - Favorites
  '/favs/track/{id}':
    post:
      operationId: FavoriteController_addTrack
      summary: Add track
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the track
          schema:
            format: uuid
            type: string
      responses:
        '201':
          description: The track has been added.
        '400':
          description: ID has invalid format
        '422':
          description: The track doesn't exist
      tags:
        - Favorites
    delete:
      operationId: FavoriteController_removeTrack
      summary: Remove track
      parameters:
        - name: id
          required: true
          in: path
          description: The ID of the track
          schema:
            format: uuid
            type: string
      responses:
        '204':
          description: Successful
        '400':
          description: ID has invalid format
        '404':
          description: Record not found
      tags:
        - Favorites

components:
  schemas:
    CreateUserDto:
      type: object
      properties:
        login:
          type: string
        password:
          type: string
          writeOnly: true
      required:
        - login
        - password
    User:
      type: object
      properties:
        id:
          type: string
          format: uuid
        login:
          type: string
        password:
          type: string
          writeOnly: true
        version:
          type: number
          minimum: 1
        createdAt:
          type: number
          format: timestamp
        updatedAt:
          type: number
          format: timestamp
      required:
        - id
        - login
        - password
        - version
        - createdAt
        - updatedAt
    UpdateUserPasswordDto:
      type: object
      properties:
        oldPassword:
          type: string
          description: The user's old password
        newPassword:
          type: string
          description: The user's new password
      required:
        - oldPassword
        - newPassword
    CreateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          format: uuid
        albumId:
          type: string
          format: uuid
        duration:
          type: number
          minimum: 0
      required:
        - name
        - duration
    Track:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        artistId:
          type: string
          format: uuid
        albumId:
          type: string
          format: uuid
        duration:
          type: number
          minimum: 0
      required:
        - id
        - name
        - duration
    UpdateTrackDto:
      type: object
      properties:
        name:
          type: string
        artistId:
          type: string
          format: uuid
        albumId:
          type: string
          format: uuid
        duration:
          type: number
          minimum: 0
    CreateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
      required:
        - name
        - grammy
    Artist:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        grammy:
          type: boolean
      required:
        - id
        - name
        - grammy
    UpdateArtistDto:
      type: object
      properties:
        name:
          type: string
        grammy:
          type: boolean
    CreateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
          format: year
          minimum: 1900
        artistId:
          type: string
          format: uuid
      required:
        - name
        - year
    Album:
      type: object
      properties:
        id:
          type: string
          format: uuid
        name:
          type: string
        year:
          type: number
          format: year
          minimum: 1900
        artistId:
          type: string
          format: uuid
      required:
        - id
        - name
        - year
    UpdateAlbumDto:
      type: object
      properties:
        name:
          type: string
        year:
          type: number
          format: year
          minimum: 1900
        artistId:
          type: string
          format: uuid
    Favorite:
      type: object
      properties:
        artists:
          type: array
          items:
            '$ref': '#/components/schemas/Artist'
        albums:
          type: array
          items:
            '$ref': '#/components/schemas/Album'
        tracks:
          type: array
          items:
            '$ref': '#/components/schemas/Track'
      required:
        - artists
        - albums
        - tracks
